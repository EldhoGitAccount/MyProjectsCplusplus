// Open closed solid design principle
#include <iostream>
#include <string>
#include <cstdio>
#include <vector>
#include <fstream>
#include <boost/lexical_cast.hpp>

using namespace std;
using namespace boost;
enum class Color {
    red,
    green,
    blue};
enum class Size {
    small,
    medium,
    large};
    
struct Product {
    string name;
    Color color;
    Size size;
};

//Adding an interface
template<typename T> class Specification {

public:
      virtual bool bIsSatisfied(T* item ) = 0;
};

//Adding an interface
template<typename T> class Filter {

public:
      virtual vector<T*> Filter(vector<T*> items, Specification<T> & spec) = 0;
};

//Inheriting for open modifications from interface
class BetterFilter: public Filter<Product> {
    
public:  
      vector<Product*> Filter(vector<Product*> items, Specification<Product> & spec) override {
      vector<Product*> result;
      for(auto & item:items)
      if(spec.bIsSatisfied(item))
         result.push_back(item);
         return result;
      }
};

//Inheriting for open modifications from interface
class ColorSpecification: public Specification<Product> {
    
public: 
      Color color;
      ColorSpecification(Color color):color(color) {}
      bool bIsSatisfied(Product* item ) override {
           return (item->color == color);
      }
};

//Inheriting for open modifications from interface
class SizeSpecification: public Specification<Product> {
    
public: 
      Size size;
      explicit SizeSpecification(Color size):size(size) {}
      bool bIsSatisfied(Product* item ) override {
           return (item->size == size);
      }
};

template<typename T> class AndSpecification: public Specification<T> {
    
public: 
      Specification<T>& first;
      Specification<T>& second;
      
      AndSpecification(Specification<T>& first, Specification<T>& second):first(first),second(second) {}
      bool bIsSatisfied(T* item ) override {
           return (first.bIsSatisfied(item) && first.bIsSatisfied(item) ;
      }
};

int main()
{
  Product
  
  return 0;
}
